// pipeline {
//     agent any

//     environment {
//         BACKEND_IMAGE = 'naresh34/expense-backend:v3'
//         FRONTEND_IMAGE = 'naresh34/expense-frontend:v3'
//     }

//     stages {
//         stage('Clone Backend Repo') {
//             steps {
//                 sh '''
//                 cd /opt
//                 rm -rf expense-backend
//                 mkdir -p expense-backend
//                 cd expense-backend
//                 git clone https://github.com/Nareshindu/expense-backend.git .
//                 '''
//             }
//         }

//         stage('Clone Frontend Repo') {
//             steps {
//                 sh '''
//                 cd /opt
//                 rm -rf expense-frontend
//                 mkdir -p expense-frontend
//                 cd expense-frontend
//                 git clone https://github.com/Nareshindu/expense-frontend.git .
//                 '''
//             }
//         }

//         stage('Build Docker Images') {
//             steps {
//                 sh '''
//                 cd /opt/expense-backend
//                 docker build -t $BACKEND_IMAGE .

//                 cd /opt/expense-frontend
//                 docker build -t $FRONTEND_IMAGE .
//                 '''
//             }
//         }

//         stage('Push to Docker Hub') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
//                     sh '''
//                     echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

//                     docker push $BACKEND_IMAGE
//                     docker push $FRONTEND_IMAGE

//                     docker logout
//                     '''
//                 }
//             }
//         }
         


//     }
// }



// pipeline {
//     agent any

//     environment {
//         BACKEND_IMAGE = 'naresh34/expense-backend:v3'
//         FRONTEND_IMAGE = 'naresh34/expense-frontend:v3'
//     }

//     stages {
//         stage('Clone Backend Repo') {
//             steps {
//                 sh '''
//                 cd /opt
//                 rm -rf expense-backend
//                 mkdir -p expense-backend
//                 cd expense-backend
//                 git clone https://github.com/Nareshindu/expense-backend.git .
//                 '''
//             }
//         }

//         stage('Clone Frontend Repo') {
//             steps {
//                 sh '''
//                 cd /opt
//                 rm -rf expense-frontend
//                 mkdir -p expense-frontend
//                 cd expense-frontend
//                 git clone https://github.com/Nareshindu/expense-frontend.git .
//                 '''
//             }
//         }

//         stage('Build Docker Images') {
//             steps {
//                 sh '''
//                 cd /opt/expense-backend
//                 docker build -t $BACKEND_IMAGE .

//                 cd /opt/expense-frontend
//                 docker build -t $FRONTEND_IMAGE .
//                 '''
//             }
//         }

//         stage('Test') {
//             steps {
//                 sh 'mvn test'
//             }
//         }

//         stage('Push to Docker Hub') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
//                     sh '''
//                     echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

//                     docker push $BACKEND_IMAGE
//                     docker push $FRONTEND_IMAGE

//                     docker logout
//                     '''
//                 }
//             }
//         }

//         stage('Deploy to Dev') {
//             steps {
//                 sh 'kubectl apply -f k8s/deployment.yaml'
//             }
//         }
//         stage('Approval') {
//             steps {
//                 input "Proceed to Production?"
//             }
//         }
//         stage('Deploy to Prod') {
//             steps {
//                 sh 'kubectl apply -f k8s/prod-deployment.yaml'
//             }
//         }
//     }
//     post {
//         always {
//             mail to: 'team@example.com',
//                  subject: "Build ${currentBuild.currentResult}",
//                  body: "Check Jenkins for details."
//         }
//     }
// }



// pipeline {
//     agent any

//     tools {
//         maven 'Maven3'
//         jdk 'Java11'
//         nodejs 'Node16'   // Jenkins lo NodeJS plugin configure cheyyali
//     }

//     environment {
//         SONARQUBE_ENV = 'SonarQube-Server'
//         DEPLOY_USER   = 'vmuser'
//         BACKEND_HOST  = '192.168.1.100'
//         FRONTEND_HOST = '192.168.1.101'
//         BACKEND_PATH  = '/opt/backend'
//         FRONTEND_PATH = '/var/www/html'
//         APP_NAME      = 'myapp.jar'
//     }

//     stages {
//         stage('Checkout') {
//             steps {
//                 git 'https://github.com/example/repo.git'
//             }
//         }

//         stage('Build Backend') {
//             steps {
//                 dir('backend') {
//                     sh 'mvn clean package -DskipTests'
//                 }
//             }
//         }

//         stage('SonarQube Analysis') {
//             steps {
//                 dir('backend') {
//                     withSonarQubeEnv("${SONARQUBE_ENV}") {
//                         sh 'mvn sonar:sonar'
//                     }
//                 }
//             }
//         }

//         stage('Quality Gate') {
//             steps {
//                 timeout(time: 2, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }

//         stage('Build Frontend') {
//             steps {
//                 dir('frontend') {
//                     sh 'npm install'
//                     sh 'npm run build'
//                 }
//             }
//         }

//         stage('Deploy Backend to VM') {
//             steps {
//                 withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-creds', keyFileVariable: 'SSH_KEY')]) {
//                     sh 'scp -i $SSH_KEY -o StrictHostKeyChecking=no backend/target/*.jar ${DEPLOY_USER}@${BACKEND_HOST}:${BACKEND_PATH}/${APP_NAME}'

//                     sh '''
//                     ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${DEPLOY_USER}@${BACKEND_HOST} << EOF
//                     pkill -f "${APP_NAME}" || true
//                     nohup java -jar ${BACKEND_PATH}/${APP_NAME} > ${BACKEND_PATH}/app.log 2>&1 &
//                     EOF
//                     '''
//                 }
//             }
//         }

//         stage('Deploy Frontend to VM') {
//             steps {
//                 withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-creds', keyFileVariable: 'SSH_KEY')]) {
//                     sh 'scp -i $SSH_KEY -o StrictHostKeyChecking=no -r frontend/build/* ${DEPLOY_USER}@${FRONTEND_HOST}:${FRONTEND_PATH}/'
//                 }
//             }
//         }
//     }
// }


pipeline {
    agent any

    tools {
        jdk 'Java17'          // Jenkins -> Global Tool Config
        maven 'Maven3'        // Jenkins -> Global Tool Config
        nodejs 'Node18'       // Jenkins -> Global Tool Config
    }

    environment {
        // SONARQUBE_ENV = 'MySonarQube'  // Jenkins -> SonarQube Server name
        BACKEND_VM = 'ec2-user@<54.234.40.24'
        FRONTEND_VM = 'ec2-user@107.22.0.123'
    }

        stage('Clone Backend Repo') {
            steps {
                sh '''
                    sudo rm -rf /opt/expense-backend
                    sudo mkdir -p /opt/expense-backend
                    sudo git clone https://github.com/Nareshindu/expense-backend.git /opt/expense-backend
                '''
            }
        }

        stage('Backend - Build') {
            steps {
                sh '''
                    cd /opt/expense-backend
                    mvn clean package -DskipTests
                '''
            }
        }



        stage('Backend - Test') {
            steps {
                sh '''
                    cd /opt/expense-backend
                    sh 'mvn test'
                '''
            }
        }

        // stage('Backend - SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('MySonarQube') {
        //             dir('backend') {
        //                 sh 'mvn sonar:sonar'
        //             }
        //         }
        //     }
        // }

        stage('Clone Frontend Repo') {
            steps {
                sh '''
                    sudo rm -rf /opt/expense-frontend
                    sudo mkdir -p /opt/expense-frontend
                    sudo git clone https://github.com/Nareshindu/expense-frontend.git /opt/expense-frontend
                '''
            }
    }

        stage('Frontend - Build') {
            steps {
                sh '''
                    cd /opt/expense-frontend
                    npm install
                    npm run build
                '''
            }
        }



        stage('Frontend - Test') {
            steps {
                sh '''
                    cd /opt/expense-frontend
                    npm test -- --watchAll=false
                '''
            }
        }

        // stage('Frontend - SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('MySonarQube') {
        //             dir('frontend') {
        //                 sh 'npx sonar-scanner'
        //             }
        //         }
        //     }
        // }

        stage('Deploy to Backend VM') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'Nodes-creds',
                    usernameVariable: 'SSH_USER',
                    passwordVariable: 'SSH_PASS'
                )]) {
                    sh '''
                        sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no backend/target/*.jar $SSH_USER@$BACKEND_VM:/home/ec2-user/
                        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$BACKEND_VM "pkill -f expense-backend || true"
                        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$BACKEND_VM "nohup java -jar /home/ec2-user/*.jar > app.log 2>&1 &"
                    '''
                }
            }
        }

        stage('Deploy to Frontend VM') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'Nodes-creds',
                    usernameVariable: 'SSH_USER',
                    passwordVariable: 'SSH_PASS'
                )]) {
                    sh '''
                        sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no -r frontend/build/* $SSH_USER@$FRONTEND_VM:/var/www/html/
                    '''
                }
            }
        }
    }
}
